name: Build and Release

on:
  push:
    tags:
      - '*'
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Build for Ubuntu
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build .

    - name: Build for macOS (Intel)
      if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build .

    - name: Build for macOS (ARM)
      if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build .

    - name: Build for Windows
      if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build .
        # Extract pugixml.zip and build pugixml.dll
        curl -OL https://github.com/pugixml/pugixml/releases/download/v1.12.2/pugixml-1.12.2-win32.zip
        unzip pugixml-1.12.2-win32.zip
        cd pugixml-1.12.2-win32
        cmake .
        cmake --build .

    - name: Create zip archive for Ubuntu
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
      run: |
        chmod +x build/BtMigrate
        zip -r output.zip build/BtMigrate

    - name: Create zip archive for macOS (Intel)
      if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
      run: |
        chmod +x build/BtMigrate
        zip -r output.zip build/BtMigrate

    - name: Create zip archive for macOS (ARM)
      if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
      run: |
        chmod +x build/BtMigrate
        zip -r output.zip build/BtMigrate

    - name: Create zip archive for Windows
      if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
      run: |
        chmod +x build/BtMigrate.exe
        zip -r output.zip build/BtMigrate.exe pugixml.dll

    - name: Upload artifact for Ubuntu
      uses: actions/upload-artifact@v2
      with:
        name: build-ubuntu-latest-x86_64
        path: output.zip

    - name: Upload artifact for macOS (Intel)
      uses: actions/upload-artifact@v2
      with:
        name: build-macos-latest-x86_64
        path: output.zip

    - name: Upload artifact for macOS (ARM)
      uses: actions/upload-artifact@v2
      with:
        name: build-macos-latest-arm64
        path: output.zip

    - name: Upload artifact for Windows
      uses: actions/upload-artifact@v2
      with:
        name: build-windows-latest-x86_64
        path: output.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download artifact for Ubuntu
      uses: actions/download-artifact@v2
      with:
        name: build-ubuntu-latest-x86_64
        path: ./build-ubuntu

    - name: Download artifact for macOS (Intel)
      uses: actions/download-artifact@v2
      with:
        name: build-macos-latest-x86_64
        path: ./build-macos-x86_64

    - name: Download artifact for macOS (ARM)
      uses: actions/download-artifact@v2
      with:
        name: build-macos-latest-arm64
        path: ./build-macos-arm64

    - name: Download artifact for Windows
      uses: actions/download-artifact@v2
      with:
        name: build-windows-latest-x86_64
        path: ./build-windows

    - name: Create release
      id: create-release
      uses: actions/create-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: "v1.0"
        RELEASE_NAME: "Release v1.0"

    - name: Upload release asset for Ubuntu
      uses: actions/upload-release-asset@v2
      id: upload-ubuntu-asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        file_path: ./build-ubuntu/output.zip
        asset_name: "BtMigrate-Ubuntu-x86_64.zip"

    - name: Upload release asset for macOS (Intel)
      uses: actions/upload-release-asset@v2
      id: upload-macos-intel-asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        file_path: ./build-macos-x86_64/output.zip
        asset_name: "BtMigrate-macOS-x86_64.zip"

    - name: Upload release asset for macOS (ARM)
      uses: actions/upload-release-asset@v2
      id: upload-macos-arm-asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        file_path: ./build-macos-arm64/output.zip
        asset_name: "BtMigrate-macOS-arm64.zip"

    - name: Upload release asset for Windows
      uses: actions/upload-release-asset@v2
      id: upload-windows-asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        file_path: ./build-Windows/output.zip
        asset_name: "BtMigrate-Windows-x86_64.zip"
